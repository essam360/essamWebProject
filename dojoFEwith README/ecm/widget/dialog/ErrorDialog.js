/*
 * Licensed Materials - Property of IBM
 * (C) Copyright IBM Corp. 2010, 2017
 * US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 */
define([
	"dojo/_base/declare",
	"dojo/_base/lang",
	"dojo/_base/array",
	"dojo/_base/connect",
	"dojo/dom-attr",
	"dojo/dom-style",
	"dojo/dom-construct",
	"dojo/dom-geometry",
	"dojo/query",
	"dijit/_base/wai",
	"dijit/DialogUnderlay",
	"dijit/TitlePane",
	"dijit/layout/ContentPane",
	"dijit/layout/TabContainer",
	"dijit/layout/utils",
	"../../Messages",
	"../../model/Desktop",
	"./BaseDialog",
	"dojo/text!./templates/ErrorDialogContent.html"
], function(declare, lang, array, connect, domAttr, domStyle, domConstruct, domGeom, query, dijitwai, DialogUnderlay, TitlePane, ContentPane, TabContainer, layoutUtils, Messages, Desktop, BaseDialog, template) {

	/**
	 * @name ecm.widget.dialog.ErrorDialog
	 * @class Provides a dialog box that is used to display an error message that was generated by a service request.
	 *        This dialog can be connected to the <code>onMessageAdded</code> event of <code>ecm.model.desktop</code>
	 *        to listen to response messages and automatically display error dialogs for errors returned from requests
	 *        to the server.
	 * @augments ecm.widget.dialog.BaseDialog
	 */
	return declare("ecm.widget.dialog.ErrorDialog", [
		BaseDialog
	], {
		/** @lends ecm.widget.dialog.ErrorDialog.prototype */

		contentString: template,
		baseClass: "ecmErrorDialog dijitDialog minor",
		widgetsInTemplate: true,

		/**
		 * Determines if the model dialog is indicated as an alert dialog in the WAI accessibility attributes.
		 */
		alert: false,

		type: "error",

		/**
		 * The product identifier. By default this is CIWEB (the IBM Content Navigator product id).
		 */
		messageProductId: "CIWEB",

		/**
		 * @deprecated this field is unused
		 */
		messageQueryUrl: "http://www.ibm.com/search/csass/search?q=",

		constructor: function() {
			this.text = ".";
			this.info = ".";
			this.messageId = this.messageProductId + "0000";
		},

		postMixInProperties: function() {
			//    Set "Information" as default messaging type.
			var type = "Error", title = "error";
			lang.mixin(this, {
				title: "",
				type: title
			});
			this.messageId = this.messageId || "";
			this.messageRef = this.messageRef || "";
			this.buttonLabel = this.buttonLabel || "";
			//    Set error modal dialog as 'alertdialog' role by default.
			this.alert = true;
			this.inherited(arguments);
		},

		/**
		 * Overrides <code>ecm.widget.dialog.BaseDialog.buildRendering</code> to create the dialog rendering.
		 */
		buildRendering: function() {
			this.inherited(arguments);
			if (this.messageId == "") {
				domStyle.set(this.reference, "display", "none");
			}
			if (!this.info) {
				domStyle.set(this.messageWrapper, "display", "none");
			} else if (lang.isArray(this.info)) {
				this.tabs = new TabContainer({
					useMenu: false,
					useSlider: false,
					style: "height:175px;width:400px;"
				}, this.containerNode);
				array.forEach(this.info, function(item) {
					var contentPane = new ContentPane({
						title: item.title,
						content: item.content
					});
					if ("stackTrace" in item) {
						var trace = new TitlePane({
							content: item.stackTrace.join("<br><br>"),
							title: this.messages.error_dialog_stack_trace_title,
							open: false
						});
						domConstruct.place(trace.domNode, contentPane.containerNode, "first");
					}
					this.tabs.addChild(contentPane);
				}, this);
			}
		},

		postCreate: function() {
			this.inherited(arguments);
			this.setResizable(true);
			if (this.tabs) {
				connect.connect(this, "show", this, function() {
					// enable focus indications for message details as static text.
					query(".dijitTabPane", this.messageWrapper).attr("tabindex", 0).style({
						padding: "6px",
						margin: "2px"
					});
					this.tabs.resize();
				});
			} else {
				this.set("content", this.info);
			}
			if (this.alert) {
				dijitwai.setWaiRole(this.domNode, "alertdialog");
			}
			query(".dijitTitlePaneContentInner", this.messageWrapper).attr("tabindex", 0);
		},

		startup: function() {
			if (this.tabs) {
				this.tabs.startup();
			}
			this.inherited(arguments);
		},

		_getFocusItems: function() {
			//    summary:
			//        override _DialogMixin._getFocusItems.
			if (!this.tabs) {
				this._firstFocusItem = this.messageRef.firstChild;
				if (domStyle.get(this.messageRef, "display") == "none") {
					this._firstFocusItem = this.cancelButton.focusNode;
				}
				this._lastFocusItem = this.cancelButton.focusNode;
			} else {
				if (this._firstFocusItem) {
					this._firstFocusItem = this.description;
					return;
				}
				var elems = dijit._getTabNavigable(this.messageWrapper);
				this._firstFocusItem = elems.lowest || elems.first || this.closeButtonNode || this.domNode;
				this._lastFocusItem = this.cancelButton.focusNode;//this.description;
			}
		},

		/**
		 * Hides the dialog.
		 */
		hide: function() {
			if (this._underlayZIndex != null) {
				// Restore the underlay's original placement
				domStyle.set(DialogUnderlay._singleton.domNode, "zIndex", this._underlayZIndex);
				delete this._underlayZIndex;
			}
			
			var returnVal = this.inherited(arguments);
			this._firstFocusItem = null;
			return returnVal;
		},

		/**
		 * Overrides <code>ecm.widget.dialog.BaseDialog.resize</code>.
		 */

		/**
		 * The resize function was causing problems here and I needed it to act like the regular resize method so I
		 * commented it out. - Rob Lee
		 */

		/*resize: function() {
			// Note: This resize method duplicates BaseDialog.resize, except for adding 30 pixels to the title.
			this.inherited(arguments);
			var size = domGeom.getContentBox(this.domNode);
			var th = domGeom.getMarginBox(this.titleBar).h + 30;
			var mh = 0;
			if (this.inlineMessage && domStyle.get(this.inlineMessage, "display") != "none") {
				mh = domGeom.getMarginBox(this.inlineMessage).h;
			}
			var containerSize = layoutUtils.marginBox2contentBox(this.containerNode, {
				w: size.w,
				h: size.h - th
			});
			var ah = domGeom.getMarginBox(this.actionBar).h;
			var contentMarginBox = {
				w: containerSize.w,
				h: containerSize.h - ah - mh + 1 // need to add 1px for FF...
			};
			domGeom.setMarginBox(this.contentArea, contentMarginBox);
			var contentSize = layoutUtils.marginBox2contentBox(this.contentArea, contentMarginBox);
			if (this.contentArea.firstChild && this.contentArea.firstChild.getAttribute) {
				var firstDijit = registry.byNode(this.contentArea.firstChild);
				if (firstDijit && firstDijit.resize) {
					firstDijit.resize(contentSize);
				}
			}
		},*/

		/**
		 * Displays the provided message in this dialog.
		 * 
		 * @param message
		 *            An instance of <code>ecm.model.Message</code> containing the error message to display.
		 */
		showMessage: function(message) { // just show it.
			this.set("text", message.text);
			this.setTitle("");
			this.titleNode.innerHTML = '<div class="dijitInline messageDescription">' + message.text + '</div>';

			if (this.description.firstChild) {
				this.description.replaceChild(document.createTextNode(message.text), this.description.firstChild);
			} else {
				this.description.appendChild(document.createTextNode(message.text));
			}

			//if there's a messageProductId provided from the message, use that.  If not, use the one set here which is defaulted to "CIWEB"
			var messageProductId = message.messageProductId && message.messageProductId.length > 0 ? message.messageProductId : this.messageProductId;

			this.setReferenceLink(messageProductId + message.number, ecm.model.desktop.getMessageSearchUrl() + messageProductId + message.number, this.messages.error_reference_hover);
			var adminResponse = (message.adminResponse && message.adminResponse.length > 0) ? ("<br/><br/>" + message.adminResponse) : "";
			if (message.explanation && message.explanation.length > 0) {
				if (message.userResponse && message.userResponse.length > 0) {
					this.containerNode.innerHTML = message.explanation + "<br/><br/>" + message.userResponse + adminResponse;
				} else {
					this.containerNode.innerHTML = message.explanation + adminResponse;
				}
			} else {
				if (message.userResponse && message.userResponse.length > 0) {
					this.containerNode.innerHTML = message.userResponse + adminResponse;
				} else {
					this.containerNode.innerHTML = "";
				}
			}

			var contentId = domAttr.get(this.containerNode, "id") || "";
			var moreInfoId = "";
			domStyle.set(this.moreInformation, "display", "none");
			if (message.moreInformation && message.moreInformation.length > 0) {
				domStyle.set(this.moreInformation, "display", "block");
				this.moreInformation.innerHTML = message.moreInformation;
				moreInfoId = domAttr.get(this.moreInformation, "id") || "";
			}

			if (contentId || moreInfoId) {
				var labelBy = moreInfoId;
				if (contentId)
					labelBy += labelBy ? (" " + contentId) : contentId;
				var existinglabelBy = domAttr.get(this.cancelButton.focusNode, "aria-labelledby") || "";
				if (existinglabelBy)
					labelBy += labelBy ? (" " + existinglabelBy) : existinglabelBy;
				domAttr.set(this.cancelButton.focusNode, "aria-labelledby", labelBy);
			}

			this.show();

			// Make the error dialog appear in front of any other open dialogs
			var zIndex = 1052; // 2 greater than the StatusDialog
			var underlayNode = DialogUnderlay._singleton && DialogUnderlay._singleton.domNode;
			domStyle.set(this.domNode, "zIndex", zIndex);
			if (underlayNode) {
				var underlayZIndex = domStyle.get(underlayNode, "zIndex");
				if (underlayZIndex != zIndex - 1) {
					// Remember the underlay's original placement
					this._underlayZIndex = underlayZIndex;
					domStyle.set(underlayNode, "zIndex", zIndex - 1);
				}
			}
		},
		
		show: function() {
			this.inherited(arguments);
			setTimeout(lang.hitch(this, function() {
				this.cancelButton.focusNode.focus();
			}), 500);
		},

		/**
		 * A handler for when a message has been added to the desktop. This is normally connected to
		 * <code>ecm.model.Desktop.onMessageAdded</code>.
		 */
		messageAddedHandler: function(message) {
			if (message.level >= 2 && !message.backgroundRequest) {
				this.showMessage(message);
			}
		}
	});
});
